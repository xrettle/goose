"use strict";(self.webpackChunkgoose=self.webpackChunkgoose||[]).push([[5896],{68008:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var s=n(30351),i=n(74848),r=n(28453);const o={title:"How to Make An MCP Server MCP-UI Compatible",description:"How I made existing MCP servers MCP-UI compatible with just a few lines of code",authors:["ebony"]},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Why I Wanted This",id:"why-i-wanted-this",level:2},{value:"The Pattern",id:"the-pattern",level:2},{value:"<strong>1. Install the SDK</strong>",id:"1-install-the-sdk",level:3},{value:"<strong>2. Import it</strong>",id:"2-import-it",level:3},{value:"<strong>3. Build your HTML</strong>",id:"3-build-your-html",level:3},{value:"<strong>4. Return both</strong>",id:"4-return-both",level:3},{value:"Step 3: My Cloudinary UI",id:"step-3-my-cloudinary-ui",level:2},{value:"What Makes MCP-UI Interactive?",id:"what-makes-mcp-ui-interactive",level:3},{value:"Step 4: Look How Small the Diff Is",id:"step-4-look-how-small-the-diff-is",level:2},{value:"Filesystem: Same Pattern",id:"filesystem-same-pattern",level:2},{value:"Ahead of the Curve",id:"ahead-of-the-curve",level:2},{value:"Try It Yourself",id:"try-it-yourself",level:2}];function d(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:s,Head:o}=t;return s||p("Details",!0),o||p("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"blog banner",src:n(88385).A+"",width:"2240",height:"1260"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://mcpui.dev/guide/introduction",children:"MCP-UI"})," is in its infancy, and there's something addictive about being this early to the party. We're at this fascinating point where both the spec and client implementations are actively developing, and I find it thrilling to build alongside that evolution."]}),"\n",(0,i.jsxs)(t.p,{children:["I wanted to see how far I could push it. So I grabbed two open source MCP servers, ",(0,i.jsx)(t.a,{href:"https://github.com/felores/cloudinary-mcp-server",children:"Cloudinary"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",children:"Filesystem"}),", and gave them a UI. Instead of boring text, I now get rich, interactive interfaces right inside goose."]}),"\n",(0,i.jsx)(t.h2,{id:"why-i-wanted-this",children:"Why I Wanted This"}),"\n",(0,i.jsx)(t.p,{children:"Raw JSON and text is fine, it gets the job done but let's be real I'd rather interact with something pretty. Give me a cool UI over back and forth prompts."}),"\n",(0,i.jsx)(t.p,{children:"Take Cloudinary for example. By default, uploads return a block of text, basically a JSON dump of URLs, metadata, and public IDs. Useful, sure, but not exactly easy to glance at."}),"\n",(0,i.jsx)(t.p,{children:"What I really wanted was:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Image and video previews"}),"\n",(0,i.jsx)(t.li,{children:"One\u2011click buttons to copy or view links"}),"\n",(0,i.jsx)(t.li,{children:"Transformation examples"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"With MCP-UI, it\u2019s not just text responses anymore. Now responses can be little apps you can actually click around in within your agent's chat interface."}),"\n","\n",(0,i.jsx)("div",{style:{width:"100%",maxWidth:"800px",margin:"0 auto"},children:(0,i.jsxs)("video",{controls:!0,width:"100%",height:"400px",playsInline:!0,children:[(0,i.jsx)("source",{src:n(86221).A,type:"video/mp4"}),(0,i.jsx)(t.p,{children:"Your browser does not support the video tag."})]})}),"\n",(0,i.jsx)(t.h2,{id:"the-pattern",children:"The Pattern"}),"\n",(0,i.jsx)(t.p,{children:"Here\u2019s the cool part, the steps are basically the same for any MCP server."}),"\n",(0,i.jsx)(t.h3,{id:"1-install-the-sdk",children:(0,i.jsx)(t.strong,{children:"1. Install the SDK"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm install @mcp-ui/server\n"})}),"\n",(0,i.jsx)(t.h3,{id:"2-import-it",children:(0,i.jsx)(t.strong,{children:"2. Import it"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'import { createUIResource } from "@mcp-ui/server";\n'})}),"\n",(0,i.jsx)(t.h3,{id:"3-build-your-html",children:(0,i.jsx)(t.strong,{children:"3. Build your HTML"})}),"\n",(0,i.jsxs)(t.p,{children:["For my Cloudinary server update, I used ",(0,i.jsx)(t.code,{children:"Direct HTML \u2192 iframe"}),". I wrote a function that returns an HTML string that includes upload previews and action buttons."]}),"\n",(0,i.jsxs)(t.p,{children:["MCP-UI takes that HTML and renders it inside an iframe using ",(0,i.jsx)(t.code,{children:"srcdoc"}),".",(0,i.jsx)(t.br,{}),"\n","It\u2019s simple, totally self-contained, fast to iterate, and I get full control over how it looks."]}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udca1 However, other modes exist:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"External URL"})," \u2013 iframe a hosted page:",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.code,{children:'content: { type: "externalUrl", iframeUrl }'})]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Remote DOM"})," \u2013 send a script that builds UI directly in the host\u2019s DOM:",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.code,{children:'content: { type: "remoteDom", script, framework }'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["But for my use case, ",(0,i.jsx)(t.strong,{children:"Direct HTML was the perfect fit."})]}),"\n",(0,i.jsx)(t.h3,{id:"4-return-both",children:(0,i.jsx)(t.strong,{children:"4. Return both"})}),"\n",(0,i.jsxs)(t.p,{children:["In your tool handler, I recommend returning both the original response and the ",(0,i.jsx)(t.code,{children:"createUIResource"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"That\u2019s it. Regardless the server the main steps remain the same."}),"\n",(0,i.jsx)(t.admonition,{title:"warning",type:"tip",children:(0,i.jsxs)(t.p,{children:["Right now the MCP-UI SDK is only available in ",(0,i.jsx)(t.strong,{children:"TypeScript"})," and ",(0,i.jsx)(t.strong,{children:"Ruby"}),".\nIf your server is in one of those languages, you can start today.\nIf not, you\u2019ll either need to wait for more SDKs to drop or build your own bindings."]})}),"\n",(0,i.jsx)(t.h2,{id:"step-3-my-cloudinary-ui",children:"Step 3: My Cloudinary UI"}),"\n",(0,i.jsx)(t.p,{children:"Here\u2019s the HTML generator I wrote for Cloudinary, this is where you decide exactly how your UI should look."}),"\n",(0,i.jsx)(t.p,{children:"Instead of just telling you, let\u2019s look at the difference."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Before MCP-UI (left):"})," An unstyled block of text with links and raw transformations"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"After MCP-UI (right):"})," A clean layout with cute interactive cards & previews"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"before vs after MCP-UI",src:n(54279).A+"",width:"2276",height:"1204"})}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to see the code"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'private createUploadResultUI(result: UploadApiResponse): string {\n    const isImage = result.resource_type === \'image\';\n    const isVideo = result.resource_type === \'video\';\n\n    return `\n    <!DOCTYPE html>\n    <html lang="en">\n    <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Cloudinary Upload Result</title>\n    <style>\n    body {\n      font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n      margin: 0;\n      padding: 20px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      min-height: 100vh;\n    }\n    .container {\n      max-width: 800px;\n      margin: 0 auto;\n      background: white;\n      border-radius: 15px;\n      box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n      overflow: hidden;\n    }\n    .header {\n      background: linear-gradient(135deg, #4CAF50, #45a049);\n      color: white;\n      padding: 30px;\n      text-align: center;\n    }\n    .content { padding: 30px; }\n    .preview-section { text-align: center; margin-bottom: 30px; }\n    .preview-section img, .preview-section video {\n      max-width: 100%; max-height: 300px; border-radius: 10px;\n      box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n    }\n    .actions { display: flex; gap: 15px; justify-content: center; flex-wrap: wrap; }\n    .btn { padding: 12px 24px; border-radius: 25px; color: white; border: none; cursor: pointer; }\n    .btn-primary { background: #007bff; }\n    .btn-success { background: #28a745; }\n    </style>\n    </head>\n    <body>\n      <div class="container">\n        <div class="header">\n          <div style="font-size:3em">\u2705</div>\n          <h1>Upload Successful!</h1>\n        </div>\n        <div class="content">\n          ${isImage ? `<img src="${result.secure_url}" />` : \'\'}\n          ${isVideo ? `<video controls><source src="${result.secure_url}" /></video>` : \'\'}\n          <div class="actions">\n            <a href="${result.secure_url}" target="_blank" class="btn btn-primary">\ud83d\udd17 View</a>\n            <button class="btn btn-success" onclick="navigator.clipboard.writeText(\'${result.secure_url}\')">\ud83d\udccb Copy URL</button>\n          </div>\n        </div>\n      </div>\n      <script>\n    // highlight-start\n        const resizeObserver = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            window.parent.postMessage({\n              type: "ui-size-change",\n              payload: { height: entry.contentRect.height },\n            }, "*");\n          });\n        });\n        resizeObserver.observe(document.documentElement);\n    //highlight-end\n      <\/script>\n    </body>\n    </html>\n    `;\n}\n'})})]}),"\n",(0,i.jsx)(t.admonition,{title:"Resize your UI",type:"tip",children:(0,i.jsxs)(t.p,{children:["Notice the ",(0,i.jsx)(t.code,{children:"ResizeObserver"})," at the bottom of the HTML.",(0,i.jsx)(t.br,{}),"\n","That little snippet is what keeps the iframe height in sync with your content so if your UI grows or shrinks, the window resizes automatically. Without it, your UI might look cut off and difficult to view."]})}),"\n",(0,i.jsx)(t.h3,{id:"what-makes-mcp-ui-interactive",children:"What Makes MCP-UI Interactive?"}),"\n",(0,i.jsxs)(t.p,{children:["A clean UI is nice, but it gets way more interesting when those buttons actually do something. That\u2019s where ",(0,i.jsx)(t.strong,{children:"UI Actions"})," come in; they turn static layouts into interactive tools that can talk back to your agent."]}),"\n","\n",(0,i.jsx)("div",{style:{width:"100%",maxWidth:"800px",margin:"0 auto"},children:(0,i.jsxs)("video",{controls:!0,width:"100%",height:"400px",playsInline:!0,children:[(0,i.jsx)("source",{src:n(46577).A,type:"video/mp4"}),(0,i.jsx)(t.p,{children:"Your browser does not support the video tag."})]})}),"\n",(0,i.jsxs)(t.p,{children:["In my Cloudinary server, I added ",(0,i.jsx)(t.strong,{children:"two"})," UI actions right after the ",(0,i.jsx)(t.code,{children:"ResizeObserver"})," in the ",(0,i.jsx)(t.code,{children:"<script>"})," block of ",(0,i.jsx)(t.code,{children:"createUploadResultUI"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Prompt Action"})," \u2192 Fires off a prompt to goose asking it to caption the image like a meme."]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to see the code"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'  function makeMeme() {\n    window.parent.postMessage({\n      type: "prompt",\n      payload: {\n        prompt: "Create a funny meme caption for this image. Make it humorous and engaging."\n      }\n    }, "*");\n  }\n'})})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Link Action"})," \u2192 Opens Twitter with the uploaded image pre-linked so you can share it in one click."]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to see the code"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'        function shareOnTwitter() {\n            const tweetText = encodeURIComponent(\n            "I didn\u2019t write this tweet\u2026 goose did. (${result.resource_type} included). & here\u2019s how you can do it too \ud83e\uddf5 #MCPUI");\n            const imageUrl = encodeURIComponent("${result.secure_url}");\n            const twitterUrl = "https://twitter.com/intent/tweet?text=" + tweetText + "&url=" + imageUrl;\n\n            window.parent.postMessage({\n            type: "link",\n            payload: { url: twitterUrl }\n            }, "*");\n        }\n'})})]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Want to see it live? ",(0,i.jsx)(t.a,{href:"https://x.com/EbonyJLouis/status/1966203455955157337",children:"Here\u2019s the tweet goose posted for me"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{title:"More UI Actions",type:"tip",children:(0,i.jsxs)(t.p,{children:["Prompt and Link are just two examples. MCP-UI also supports ",(0,i.jsx)(t.strong,{children:"Tool"}),", ",(0,i.jsx)(t.strong,{children:"Intent"}),", and ",(0,i.jsx)(t.strong,{children:"Notify"})," actions."]})}),"\n",(0,i.jsx)(t.h2,{id:"step-4-look-how-small-the-diff-is",children:"Step 4: Look How Small the Diff Is"}),"\n",(0,i.jsx)(t.p,{children:"This is the part that blew my mind, making a tool UI-compatible is just a tiny code change."}),"\n",(0,i.jsx)(t.p,{children:"Here\u2019s the old version:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'return {\n    content: [\n        {\n            type: "text",\n            text: JSON.stringify(response, null, 2)\n        }\n    ]\n};\n'})}),"\n",(0,i.jsx)(t.p,{children:"And here\u2019s the new version with MCP-UI support:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"return {\n    content: [\n        {\n            type: \"text\",\n            text: `\ud83c\udf89 Upload successful!\\n\\n${JSON.stringify(response, null, 2)}`\n        },\n        createUIResource({\n            uri: `ui://cloudinary-upload/${result.public_id}`,\n            content: { type: 'rawHtml', htmlString: this.createUploadResultUI(result) },\n            encoding: 'text'\n        })\n    ]\n};\n"})}),"\n",(0,i.jsx)(t.p,{children:"That\u2019s it. One extra resource, and suddenly goose renders a full UI."}),"\n",(0,i.jsx)(t.h2,{id:"filesystem-same-pattern",children:"Filesystem: Same Pattern"}),"\n",(0,i.jsx)(t.p,{children:"To prove this wasn\u2019t a one-off, I also made the Filesystem MCP server UI-compatible."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Before:"})," Text output (what goose shows by default)"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"before MCP-UI",src:n(62390).A+"",width:"1096",height:"876"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"After:"})," UI output (interactive explorer with MCP-UI)"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"With MCP-UI",src:n(52809).A+"",width:"1392",height:"890"})}),"\n",(0,i.jsx)(t.p,{children:"And here\u2019s the only diff you need:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'return {\n    content: [\n        { type: "text", text: `\ud83d\udcc2 Files in ${directoryPath}:\\n\\n${textResponse}` },\n        createUIResource({\n            uri: `ui://filesystem/explorer/${encodeURIComponent(directoryPath)}`,\n            content: { type: "rawHtml", htmlString: htmlContent },\n            encoding: "text",\n        })\n    ]\n};\n'})}),"\n",(0,i.jsx)(t.h2,{id:"ahead-of-the-curve",children:"Ahead of the Curve"}),"\n",(0,i.jsx)(t.p,{children:"I\u2019ve now made two MCP servers UI-compatible, before MCP-UI is even fully rolled out. That's crazy to me."}),"\n",(0,i.jsx)(t.p,{children:"And if you zoom out, you\u2019ll see other companies pushing here too. goose and Postman already support rendering and a couple of UI actions. In goose right now, a button can fire off a new prompt or open an external link. It\u2019s not the full vision yet, but it\u2019s already enough to start building experiences that feel more like mini-apps than static responses."}),"\n",(0,i.jsx)(t.p,{children:"That\u2019s what excites me, we\u2019re not waiting around. We\u2019re experimenting in the open, and shaping what the future will feel like."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"try-it-yourself",children:"Try It Yourself"}),"\n",(0,i.jsx)(t.p,{children:"Wanna see it in action?"}),"\n",(0,i.jsxs)(t.p,{children:["Download ",(0,i.jsx)(t.a,{href:"/docs/quickstart#install-goose",children:"goose"}),", give an MCP server a UI facelift of your own, and see the magic for yourself. Boring text prompts will never hit the same again."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"Got questions?"})," Explore our ",(0,i.jsx)(t.a,{href:"/docs/category/guides",children:"docs"}),", browse the ",(0,i.jsx)(t.a,{href:"/blog",children:"blog"}),", or join the conversation in our ",(0,i.jsx)(t.a,{href:"https://discord.gg/block-opensource",children:"Discord"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/block/goose/discussions",children:"GitHub Discussions"}),". We\u2019d love to have you."]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("meta",{property:"og:title",content:"How to Make An MCP Server MCP-UI Compatible"}),(0,i.jsx)("meta",{property:"og:type",content:"article"}),(0,i.jsx)("meta",{property:"og:url",content:"https://block.github.io/goose/blog/2025/09/08/turn-any-mcp-server-mcp-ui-compatible"}),(0,i.jsx)("meta",{property:"og:description",content:"How I made existing MCP servers MCP-UI compatible with just a few lines of code."}),(0,i.jsx)("meta",{property:"og:image",content:"https://block.github.io/goose/assets/images/mcp-ui-0a7ec9ab9d9b8b0f84e1372e956cfbde.png"}),(0,i.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,i.jsx)("meta",{property:"twitter:domain",content:"block.github.io/goose"}),(0,i.jsx)("meta",{name:"twitter:title",content:"How to Make An MCP Server MCP-UI Compatible"}),(0,i.jsx)("meta",{name:"twitter:description",content:"How I made existing MCP servers MCP-UI compatible with just a few lines of code."}),(0,i.jsx)("meta",{name:"twitter:image",content:"https://block.github.io/goose/assets/images/mcp-ui-0a7ec9ab9d9b8b0f84e1372e956cfbde.png"})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function p(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},86221:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/medias/cloudinary2-1e93545aba7443c32482d7e74ce1937c.mp4"},46577:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/medias/cloudinaryaction-648ffc191544cc62ef4ce161ff081459.mp4"},54279:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/cloudinaryBefore&After-ef0007c4b6e484cbd94cf8dba13c1887.png"},52809:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/filesystemAfter-0bb2ca34488d546e268cfbc3345ae7ec.png"},62390:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/filesystemBefore-a82e322fb5a7feb404cf28b0ca42f989.png"},88385:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/mcp-ui-0a7ec9ab9d9b8b0f84e1372e956cfbde.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(96540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}},30351:e=>{e.exports=JSON.parse('{"permalink":"/goose/blog/2025/09/08/turn-any-mcp-server-mcp-ui-compatible","source":"@site/blog/2025-09-08-turn-any-mcp-server-mcp-ui-compatible/index.mdx","title":"How to Make An MCP Server MCP-UI Compatible","description":"How I made existing MCP servers MCP-UI compatible with just a few lines of code","date":"2025-09-08T00:00:00.000Z","tags":[],"readingTime":7.475,"hasTruncateMarker":true,"authors":[{"name":"Ebony Louis","title":"Developer Advocate","page":{"permalink":"/goose/blog/authors/ebony"},"socials":{"linkedin":"https://www.linkedin.com/in/ebonylouis/","x":"https://x.com/ebonyjlouis","github":"https://github.com/ebonylouis"},"imageURL":"https://avatars.githubusercontent.com/u/55366651?v=4","key":"ebony"}],"frontMatter":{"title":"How to Make An MCP Server MCP-UI Compatible","description":"How I made existing MCP servers MCP-UI compatible with just a few lines of code","authors":["ebony"]},"unlisted":false,"prevItem":{"title":"Automate Your Complex Workflows with Sub-Recipes in goose","permalink":"/goose/blog/2025/09/15/subrecipes-in-goose"},"nextItem":{"title":"When AI Becomes Your New Team Member: The Story of Goose Janitor","permalink":"/goose/blog/2025/08/28/ai-teammate"}}')}}]);