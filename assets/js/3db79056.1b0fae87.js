"use strict";(self.webpackChunkgoose=self.webpackChunkgoose||[]).push([[7813],{11937:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"guides/acp-clients","title":"Using Goose in ACP Clients","description":"Client applications that support the Agent Client Protocol (ACP) can connect natively to Goose. This integration allows you to seamlessly interact with Goose directly from the client.","source":"@site/docs/guides/acp-clients.md","sourceDirName":"guides","slug":"/guides/acp-clients","permalink":"/goose/docs/guides/acp-clients","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":25,"frontMatter":{"sidebar_position":25,"title":"Using Goose in ACP Clients","sidebar_label":"Goose in ACP Clients"},"sidebar":"tutorialSidebar","previous":{"title":"Environment Variables","permalink":"/goose/docs/guides/environment-variables"},"next":{"title":"Enhanced Code Editing","permalink":"/goose/docs/guides/enhanced-code-editing"}}');var i=s(74848),t=s(28453);const r={sidebar_position:25,title:"Using Goose in ACP Clients",sidebar_label:"Goose in ACP Clients"},l=void 0,c={},a=[{value:"How It Works",id:"how-it-works",level:2},{value:"Zed Editor Setup",id:"zed-editor-setup",level:2},{value:"1. Prerequisites",id:"1-prerequisites",level:3},{value:"2. Configure Goose as a Custom Agent",id:"2-configure-goose-as-a-custom-agent",level:3},{value:"3. Start Using Goose in Zed",id:"3-start-using-goose-in-zed",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Client applications that support the ",(0,i.jsx)(n.a,{href:"https://agentclientprotocol.com/",children:"Agent Client Protocol (ACP)"})," can connect natively to Goose. This integration allows you to seamlessly interact with Goose directly from the client."]}),"\n",(0,i.jsx)(n.admonition,{title:"Experimental Feature",type:"warning",children:(0,i.jsx)(n.p,{children:"ACP is an emerging specification that enables clients to communicate with AI agents like Goose. This feature has limited adoption and may evolve as the protocol develops."})}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsx)(n.p,{children:"After you configure Goose as an agent in the ACP client, you gain access to Goose's core agent functionality, including its extensions and tools."}),"\n",(0,i.jsx)(n.p,{children:"The client manages the Goose lifecycle automatically, including:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Initialization"}),": The client runs the ",(0,i.jsx)(n.code,{children:"goose acp"})," command to initialize the connection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Communication"}),": The client communicates with Goose over stdio using JSON-RPC"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple Sessions"}),": The client manages multiple concurrent Goose conversations simultaneously"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Session Persistence",type:"info",children:(0,i.jsx)(n.p,{children:"ACP sessions are not currently persisted between client restarts or accessible from Goose session history."})}),"\n",(0,i.jsx)(n.h2,{id:"zed-editor-setup",children:"Zed Editor Setup"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://zed.dev/",children:"Zed"})," is the primary ACP-compatible editor. Here's how to integrate Goose:"]}),"\n",(0,i.jsx)(n.h3,{id:"1-prerequisites",children:"1. Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Ensure you have both Zed and Goose CLI installed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Zed"}),": Download from ",(0,i.jsx)(n.a,{href:"https://zed.dev/",children:"zed.dev"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goose CLI"}),": Follow the ",(0,i.jsx)(n.a,{href:"/docs/getting-started/installation",children:"installation guide"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["ACP support requires version 1.8.0 or later - check with ",(0,i.jsx)(n.code,{children:"goose --version"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Temporarily run ",(0,i.jsx)(n.code,{children:"goose acp"})," to test that ACP support is working:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"~ goose acp\nGoose ACP agent started. Listening on stdio...\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Press ",(0,i.jsx)(n.code,{children:"Ctrl+C"})," to exit the test."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-configure-goose-as-a-custom-agent",children:"2. Configure Goose as a Custom Agent"}),"\n",(0,i.jsx)(n.p,{children:"Add Goose to your Zed settings:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Open Zed"}),"\n",(0,i.jsxs)(n.li,{children:["Press ",(0,i.jsx)(n.code,{children:"Cmd+,"})," (macOS) or ",(0,i.jsx)(n.code,{children:"Ctrl+,"})," (Linux/Windows) to open settings"]}),"\n",(0,i.jsx)(n.li,{children:"Add the following configuration:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "agent_servers": {\n    "Goose \ud83e\udebf": {\n      "command": "goose",\n      "args": ["acp"],\n      "env": {}\n    }\n  },\n  // more settings\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You should now be able to interact with Goose directly in Zed. Your ACP sessions use the same extensions that are enabled in your Goose configuration, and your tools (Developer, Computer Controller, etc.) work the same way as in regular Goose sessions."}),"\n",(0,i.jsx)(n.h3,{id:"3-start-using-goose-in-zed",children:"3. Start Using Goose in Zed"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Open the Agent Panel"}),": Click the sparkles agent icon in Zed's status bar"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create New Thread"}),": Click the ",(0,i.jsx)(n.code,{children:"+"})," button to show thread options"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Select Goose"}),": Choose ",(0,i.jsx)(n.code,{children:"New Goose \ud83e\udebf Thread"})," to start a new conversation with Goose"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Start Chatting"}),": Interact with Goose directly from the agent panel"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["By default, Goose will use the provider and model defined in your ",(0,i.jsx)(n.a,{href:"/docs/guides/config-file",children:"configuration file"}),". You can override this for specific ACP configurations using the ",(0,i.jsx)(n.code,{children:"GOOSE_PROVIDER"})," and ",(0,i.jsx)(n.code,{children:"GOOSE_MODEL"})," environment variables."]}),"\n",(0,i.jsx)(n.p,{children:"The following Zed settings example configures two Goose agent instances. This is useful for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Comparing model performance on the same task"}),"\n",(0,i.jsx)(n.li,{children:"Using cost-effective models for simple tasks and powerful models for complex ones"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "agent_servers": {\n    "Goose \ud83e\udebf": {\n      "command": "goose",\n      "args": ["acp"],\n      "env": {}\n    },\n    "Goose (GPT-4o)": {\n      "command": "goose",\n      "args": ["acp"],\n      "env": {\n        "GOOSE_PROVIDER": "openai",\n        "GOOSE_MODEL": "gpt-4o"\n      }\n    }\n  },\n  // more settings\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var o=s(96540);const i={},t=o.createContext(i);function r(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);