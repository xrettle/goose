"use strict";(self.webpackChunkgoose=self.webpackChunkgoose||[]).push([[719],{180:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>l});var n=o(30351),i=o(74848),s=o(28453);const r={title:"How to Make An MCP Server MCP-UI Compatible",description:"How I made existing MCP servers MCP-UI compatible with just a few lines of code",authors:["ebony"]},a=void 0,c={authorsImageUrls:[void 0]},l=[];function p(e){const t={a:"a",img:"img",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"blog banner",src:o(88385).A+"",width:"2240",height:"1260"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://mcpui.dev/guide/introduction",children:"MCP-UI"})," is in its infancy, and there's something addictive about being this early to the party. We're at this fascinating point where both the spec and client implementations are actively developing, and I find it thrilling to build alongside that evolution."]}),"\n",(0,i.jsxs)(t.p,{children:["I wanted to see how far I could push it. So I grabbed two open source MCP servers, ",(0,i.jsx)(t.a,{href:"https://github.com/felores/cloudinary-mcp-server",children:"Cloudinary"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",children:"Filesystem"}),", and gave them a UI. Instead of boring text, I now get rich, interactive interfaces right inside goose."]})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},88385:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/mcp-ui-0a7ec9ab9d9b8b0f84e1372e956cfbde.png"},28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var n=o(96540);const i={},s=n.createContext(i);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:t},e.children)}},30351:e=>{e.exports=JSON.parse('{"permalink":"/goose/blog/2025/09/08/turn-any-mcp-server-mcp-ui-compatible","source":"@site/blog/2025-09-08-turn-any-mcp-server-mcp-ui-compatible/index.mdx","title":"How to Make An MCP Server MCP-UI Compatible","description":"How I made existing MCP servers MCP-UI compatible with just a few lines of code","date":"2025-09-08T00:00:00.000Z","tags":[],"readingTime":7.475,"hasTruncateMarker":true,"authors":[{"name":"Ebony Louis","title":"Developer Advocate","page":{"permalink":"/goose/blog/authors/ebony"},"socials":{"linkedin":"https://www.linkedin.com/in/ebonylouis/","x":"https://x.com/ebonyjlouis","github":"https://github.com/ebonylouis"},"imageURL":"https://avatars.githubusercontent.com/u/55366651?v=4","key":"ebony"}],"frontMatter":{"title":"How to Make An MCP Server MCP-UI Compatible","description":"How I made existing MCP servers MCP-UI compatible with just a few lines of code","authors":["ebony"]},"unlisted":false,"prevItem":{"title":"Automate Your Complex Workflows with Sub-Recipes in goose","permalink":"/goose/blog/2025/09/15/subrecipes-in-goose"},"nextItem":{"title":"When AI Becomes Your New Team Member: The Story of Goose Janitor","permalink":"/goose/blog/2025/08/28/ai-teammate"}}')}}]);