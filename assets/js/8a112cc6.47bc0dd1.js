"use strict";(self.webpackChunkgoose=self.webpackChunkgoose||[]).push([[2714],{48237:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tutorials/sub-recipes-in-parallel","title":"Running Sub-Recipes In Parallel","description":"Run multiple sub-recipes instances concurrently with real-time progress tracking","source":"@site/docs/tutorials/sub-recipes-in-parallel.md","sourceDirName":"tutorials","slug":"/tutorials/sub-recipes-in-parallel","permalink":"/goose/docs/tutorials/sub-recipes-in-parallel","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Running Sub-Recipes In Parallel","sidebar_label":"Sub-Recipes In Parallel","description":"Run multiple sub-recipes instances concurrently with real-time progress tracking"},"sidebar":"tutorialSidebar","previous":{"title":"Goose Recipes","permalink":"/goose/docs/tutorials/recipes-tutorial"},"next":{"title":"MCP Servers","permalink":"/goose/docs/category/mcp-servers"}}');var s=i(74848),t=i(28453);const a={title:"Running Sub-Recipes In Parallel",sidebar_label:"Sub-Recipes In Parallel",description:"Run multiple sub-recipes instances concurrently with real-time progress tracking"},l=void 0,o={},c=[{value:"How It Works",id:"how-it-works",level:2},{value:"Different Sub-Recipes",id:"different-sub-recipes",level:3},{value:"Same Sub-Recipe",id:"same-sub-recipe",level:3},{value:"Real-Time Progress Monitoring",id:"real-time-progress-monitoring",level:3},{value:"Examples",id:"examples",level:2},{value:"Running Different Sub-Recipes in Parallel",id:"running-different-sub-recipes-in-parallel",level:3},{value:"Running the Same Sub-Recipe in Parallel (with Different Parameters)",id:"running-the-same-sub-recipe-in-parallel-with-different-parameters",level:3},{value:"Choosing Between Execution Modes",id:"choosing-between-execution-modes",level:2},{value:"Learn More",id:"learn-more",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Goose recipes can execute multiple ",(0,s.jsx)(n.a,{href:"/docs/guides/recipes/sub-recipes",children:"sub-recipe"})," instances concurrently using isolated worker processes. This feature enables efficient batch operations, parallel processing of different tasks, and faster completion of complex workflows."]}),"\n",(0,s.jsx)(n.admonition,{title:"Experimental Feature",type:"warning",children:(0,s.jsx)(n.p,{children:"Running sub-recipes in parallel is an experimental feature in active development. Behavior and configuration may change in future releases."})}),"\n",(0,s.jsx)(n.p,{children:"Here are some common use cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monorepo build failures"}),': When 3 services fail in a monorepo build, use a "diagnose failure" sub-recipe with each build URL to diagnose all failures in parallel']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document summarization"}),': Process a CSV file with document links by running a "summarize document" sub-recipe for each link simultaneously']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code analysis across repositories"}),": Run security, quality, and performance analysis on multiple codebases simultaneously"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsx)(n.p,{children:"Parallel sub-recipe execution uses an isolated worker system that automatically manages concurrent task execution. Goose creates individual tasks for each sub-recipe instance and distributes them across up to 10 concurrent workers."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Scenario"}),(0,s.jsx)(n.th,{children:"Default Behavior"}),(0,s.jsx)(n.th,{children:"Override Options"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Different sub-recipes"})}),(0,s.jsx)(n.td,{children:"Sequential"}),(0,s.jsx)(n.td,{children:'Add "in parallel" to prompt'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Same sub-recipe"})," with different parameters"]}),(0,s.jsx)(n.td,{children:"Parallel"}),(0,s.jsxs)(n.td,{children:["\u2022 Set ",(0,s.jsx)(n.code,{children:"sequential_when_repeated: true"}),(0,s.jsx)("br",{}),'\u2022 Add "sequentially" to prompt']})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"different-sub-recipes",children:"Different Sub-Recipes"}),"\n",(0,s.jsx)(n.p,{children:"When running different sub-recipes, Goose determines the execution mode based on:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explicit user request"}),' in the prompt ("in parallel", "sequentially")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sequential execution by default"}),": Different sub-recipes run one after another unless explicitly requested to run in parallel"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'In your prompt, you can simply mention "in parallel" in your prompt when calling different sub-recipes:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"prompt: |\n  run the following sub-recipes in parallel:\n    - use weather sub-recipe to get the weather for Sydney\n    - use things-to-do sub-recipe to find activities in Sydney\n"})}),"\n",(0,s.jsx)(n.h3,{id:"same-sub-recipe",children:"Same Sub-Recipe"}),"\n",(0,s.jsx)(n.p,{children:"When running the same sub-recipe with different parameters, Goose determines the execution mode based on:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#choosing-between-execution-modes",children:"Recipe-level configuration"})})," (",(0,s.jsx)(n.code,{children:"sequential_when_repeated"})," flag) - when set to true, this forces sequential execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User request"}),' in the prompt ("sequentially" to override default parallel behavior)']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parallel execution by default"}),": Multiple instances of the same sub-recipe run concurrently"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If your prompt implies multiple executions of the same sub-recipe, Goose will automatically create parallel instances:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"prompt: |\n  get the weather for three biggest cities in Australia\n"})}),"\n",(0,s.jsx)(n.p,{children:'In this example, Goose recognizes that "three biggest cities" requires running the weather sub-recipe multiple times for different cities, so it executes them in parallel.'}),"\n",(0,s.jsx)(n.p,{children:"If you wanted to run them sequentially, you can just tell Goose:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"prompt: |\n  get the weather for three biggest cities in Australia one at a time\n"})}),"\n",(0,s.jsx)(n.h3,{id:"real-time-progress-monitoring",children:"Real-Time Progress Monitoring"}),"\n",(0,s.jsx)(n.p,{children:"When running multiple tasks in parallel from the CLI, you can track progress through a real-time dashboard that automatically appears during execution. The dashboard provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Live progress tracking"}),": Monitor task completion in real-time with statistics for completed, running, failed, and pending counts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Task details"}),": View unique task IDs, parameter sets, execution timing, output previews, and error information as tasks progress from Pending \u2192 Running \u2192 Completed/Failed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"running-different-sub-recipes-in-parallel",children:"Running Different Sub-Recipes in Parallel"}),"\n",(0,s.jsxs)(n.p,{children:["This example runs the ",(0,s.jsx)(n.code,{children:"weather"})," and ",(0,s.jsx)(n.code,{children:"things-to-do"})," sub-recipes in parallel:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# plan_trip.yaml\nversion: 1.0.0\ntitle: Plan Your Trip\ndescription: Get weather forecast and find things to do for your destination\ninstructions: You are a travel planning assistant that helps users prepare for their trips.\nprompt: |\n  run the following sub-recipes in parallel to plan my trip:\n    - use weather sub-recipe to get the weather forecast for Sydney\n    - use things-to-do sub-recipe to find activities and attractions in Sydney\nsub_recipes:\n- name: weather\n  path: "./sub-recipes/weather.yaml"\n  values:\n    city: Sydney\n- name: things-to-do\n  path: "./sub-recipes/things-to-do.yaml"\n  values:\n    city: Sydney\n    duration: "3 days"\nextensions:\n- type: builtin\n  name: developer\n  timeout: 300\n  bundled: true\n'})}),"\n",(0,s.jsx)(n.h3,{id:"running-the-same-sub-recipe-in-parallel-with-different-parameters",children:"Running the Same Sub-Recipe in Parallel (with Different Parameters)"}),"\n",(0,s.jsxs)(n.p,{children:["This example runs three instances of the ",(0,s.jsx)(n.code,{children:"weather"})," sub-recipe in parallel for different cities:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# multi_city_weather.yaml\nversion: 1.0.0\ntitle: Multi-City Weather Comparison\ndescription: Compare weather across multiple cities for trip planning\ninstructions: You are a travel weather specialist helping users compare conditions across cities.\nprompt: |\n  get the weather forecast for the three biggest cities in Australia \n  to help me decide where to visit\nsub_recipes:\n- name: weather\n  path: "./sub-recipes/weather.yaml"\nextensions:\n- type: builtin\n  name: developer\n  timeout: 300\n  bundled: true\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Sub-Recipes:"})}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"weather"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# sub-recipes/weather.yaml\nversion: 1.0.0\ntitle: Find weather\ndescription: Get weather data for a city\ninstructions: You are a weather expert. You will be given a city and you will need to return the weather data for that city.\nprompt: |\n  Get the weather forecast for {{ city }} for today and the next few days.\nparameters:\n  - key: city\n    input_type: string\n    requirement: required\n    description: city name\nextensions:\n  - type: stdio\n    name: weather\n    cmd: uvx\n    args:\n      - mcp_weather@latest\n    timeout: 300\n"})})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"things-to-do"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# sub-recipes/things-to-do.yaml\nversion: 1.0.0\ntitle: Things to do in a city\ndescription: Find activities and attractions for travelers\ninstructions: You are a local travel expert who knows the best activities, attractions, and experiences in cities around the world.\nprompt: |\n  Suggest the best things to do in {{ city }} for a {{ duration }} trip. \n  Include a mix of popular attractions, local experiences, and hidden gems.\n  {% if weather_context %}\n  Consider the weather conditions: {{ weather_context }}\n  {% endif %}\nparameters:\n  - key: city\n    input_type: string\n    requirement: required\n    description: city name\n  - key: duration\n    input_type: string\n    requirement: required\n    description: trip duration (e.g., "2 days", "1 week")\n  - key: weather_context\n    input_type: string\n    requirement: optional\n    default: ""\n    description: weather conditions to consider for activity recommendations\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"choosing-between-execution-modes",children:"Choosing Between Execution Modes"}),"\n",(0,s.jsx)(n.p,{children:"While parallel execution offers speed benefits, sequential execution is sometimes necessary or preferable. Here's how to decide:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use Sequential When:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tasks modify shared resources"}),"\n",(0,s.jsx)(n.li,{children:"Order of execution matters"}),"\n",(0,s.jsx)(n.li,{children:"Memory or CPU constraints exist"}),"\n",(0,s.jsx)(n.li,{children:"Debugging complex failures in parallel mode"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use Parallel When:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tasks are independent"}),"\n",(0,s.jsx)(n.li,{children:"Faster completion is desired"}),"\n",(0,s.jsx)(n.li,{children:"System resources can handle concurrent executions for up to 10 parallel workers"}),"\n",(0,s.jsx)(n.li,{children:"Processing large datasets or multiple files"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Recipe-Level Configuration:"})}),"\n",(0,s.jsxs)(n.p,{children:["For sub-recipes that should never run in parallel, set ",(0,s.jsx)(n.code,{children:"sequential_when_repeated: true"})," to override user requests:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'sub_recipes:\n  - name: database-migration\n    path: "./sub-recipes/migrate.yaml"\n    sequential_when_repeated: true  # Always sequential\n'})}),"\n",(0,s.jsx)(n.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,s.jsxs)(n.p,{children:["Check out the ",(0,s.jsx)(n.a,{href:"/docs/guides/recipes",children:"Goose Recipes"})," guide for more docs, tools, and resources to help you master Goose recipes."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(96540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);